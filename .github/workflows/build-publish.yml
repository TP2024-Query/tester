name: Build/publish runner image

on:
  push:
    branches: [ runner ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}-runner
  DOCKER_BUILDKIT: 1
  
jobs:
  build:
    permissions: write-all
    name: Build and publish
    runs-on: ubuntu-latest
    steps:
      - name: Install poetry
        run: |
          sudo apt install -y pipx
          pipx ensurepath
          pipx install poetry
          pipx inject poetry poetry-plugin-export
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create requirements.txt
        run: |
          poetry export -f requirements.txt --without-hashes --output requirements.txt
      
      - name: Login
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
      - name: Build the docker image
        run: docker build . --file Dockerfile --tag ghcr.io/tp2024-query/runner:latest

      - name: Publish the Docker image
        run: docker push ghcr.io/tp2024-query/runner:latest
      
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Connect VPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved
          echo "${{ secrets.OVPN_CONFIG }}" > vpn-config.ovpn
          echo "${{ secrets.OVPN_USER }}" > vpn-credentials.txt
          echo "${{ secrets.OVPN_PASS }}" >> vpn-credentials.txt
          sudo openvpn --config vpn-config.ovpn --auth-user-pass vpn-credentials.txt --daemon
          sleep 15
      - name: Install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: Connect and pull
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }}/query-deployment && sudo docker-compose pull && sudo docker-compose up -d --force-recreate && exit"
      - name: Prune old images
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "sudo docker image prune -f"
      - name: Cleanup
        run: |
          rm -rf ~/.ssh
          rm vpn-credentials.txt
          rm vpn-config.ovpn
          sudo killall openvpn
